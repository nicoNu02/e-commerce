generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String   @unique
  password      String
  role          String   @default("USER")
  created_at    DateTime @default(now())
  cart          Cart?
  address       Address?
  dni           String?
  first_name    String?
  middle_name   String?
  last_name     String?
  date_of_birth String?
  phone_number  String?
  order         Order[]
}

model Image {
  id         String  @id @default(cuid())
  url        String  @unique
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  products    ProductCategory[]
  image       String?
}

model Product {
  id                String            @id @default(cuid())
  name              String            @unique
  created_at        DateTime          @default(now())
  times_ordered     Int               @default(0)
  description       String
  url               String?           @unique
  discount          Int?
  aditional_details String?
  images            Image[]
  colors            ColorProduct[]
  price             Int
  itemsLeft         Int?
  categories        ProductCategory[]
  cartProducts      CartProduct[]
  order_product     OrderProduct[]
}

model Color {
  id         String   @id @default(cuid())
  name       String   
  code       String   @unique
  product    ColorProduct[]
}

model ProductCategory {
  product_id  String
  category_id String
  product     Product  @relation(fields: [product_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
}

model Cart {
  id       String        @id @default(cuid())
  products CartProduct[]
  userId   String        @unique
  user     User          @relation(fields: [userId], references: [id])
}

model CartProduct {
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

model Address {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [UserId], references: [id])
  UserId       String  @unique
  address_line String
  house_number String
  floor        String?
  apartment    String?
  neighborhood String?
  country      String  @default("Argentina")
  province     String
  city         String
  postal_code  String
}

model Order {
  id               String         @id @default(cuid())
  user             User?          @relation(fields: [user_id], references: [id])
  created_at       DateTime       @default(now())
  user_id          String?
  email            String
  name             String
  last_name        String
  dni              String
  phone_number     String
  addres_line      String
  house_number     String
  flor             String?
  apartment        String?
  city             String
  province         String
  shipping_method  String
  shipping_details String?
  shipping_price   Int?
  payment_method   String
  order_product    OrderProduct[]
  total_price      Int
  notes            String?
  stage            String?        @default("In process") //on the way - finished
  paid             Boolean?       @default(false)
}

model OrderProduct {
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model ColorProduct {
  code String
  productId String
  name String
  color Color @relation(fields: [code], references: [code])
  product Product @relation(fields: [productId], references: [id])
  @@id([code, productId])
}